#version 330 core

#define NUMBER_OF_WAVES 4

const float PI = 3.141592654;
const float G = 9.81;
const float overallSteepness = 1;

uniform float waveTime;
uniform float waveNumbers;
uniform float waveSpeeds[NUMBER_OF_WAVES];
uniform float waveAmplitudes[NUMBER_OF_WAVES];
uniform float waveLengths[NUMBER_OF_WAVES];
uniform float waveSteepnesss[NUMBER_OF_WAVES];
uniform float waveDirection[NUMBER_OF_WAVES * 2];
uniform float wavePlaneLength;
uniform float waveCenter[2];
layout(location = 0) in vec3 v;
layout(location = 1) in vec3 vertexN;

uniform mat4 MVP;
uniform mat4 M;
uniform mat4 V;
uniform mat4 P;

vec2 direction;
vec2 center = vec2(waveCenter[0],waveCenter[1]);

void directionalWave(in vec3 P, out vec4 res, out vec3 N)
{
    P.y = 0;
    float speed = 0;
    float amplitude = 0;
    float wavelength = 0;
    for (int i = 0; i < waveNumbers; i++)
	{

        direction = vec2(waveDirection[i*2], waveDirection[i*2+1]);
		speed = waveSpeeds[i];
	    amplitude = waveAmplitudes[i];
		wavelength = waveLengths[i];
	    float steepness = overallSteepness / (wavelength * amplitude * waveNumbers);


		float frequency = sqrt(G*2.0*PI/wavelength);
		float phase = speed*frequency;
		float alpha = frequency*dot(direction, v.xz)+phase*waveTime;
		
        P.x += steepness* amplitude*direction.x*cos(alpha);
        P.y += amplitude * sin(dot(direction,v.xz) * frequency + waveTime * phase);
        P.z += steepness* amplitude*direction.y*cos(alpha);

        N.x += direction.x * wavelength * amplitude * cos(alpha);
        N.y += steepness * wavelength * amplitude * sin(alpha);
        N.z += direction.y * wavelength * amplitude * cos(alpha);
	}
    N.x = 0 - N.x;
    N.y = 1 - N.y;
    N.z = 0 - N.z;
    res = vec4(P,1);
}

void circularWave(in vec3 P, out vec4 res, out vec3 N)
{
    P.y = 0;
    float speed = 0;
    float amplitude = 0;
    float wavelength = 0;
    for (int i = 0; i < waveNumbers; i++)
	{

        vec2 diff = v.xz - center;
        direction = diff / length(diff);
		speed = waveSpeeds[i];
	    amplitude = waveAmplitudes[i];
		wavelength = waveLengths[i];
	    float steepness = overallSteepness / (wavelength * amplitude * waveNumbers);


		float frequency = sqrt(G*2.0*PI/wavelength);
		float phase = speed*frequency;
		float alpha = frequency*dot(direction, v.xz)+phase*waveTime;
		
        P.x += steepness* amplitude*direction.x*cos(alpha);
        P.y += amplitude * sin(dot(direction,v.xz) * frequency + waveTime * phase);
        P.z += steepness* amplitude*direction.y*cos(alpha);
	    
        N.x += direction.x * wavelength * amplitude * cos(alpha);
        N.y += steepness * wavelength * amplitude * sin(alpha);
        N.z += direction.y * wavelength * amplitude * cos(alpha);
	}
    N.x = 0 - N.x;
    N.y = 1 - N.y;
    N.z = 0 - N.z;
    res = vec4(P,1);
}

void ripple(out vec4 res)
{
    vec2 diff = v.xz - center;
    float lengthDiff = length(diff);
    float waveH = sin(4 * (2 * PI) * lengthDiff - waveTime) * 0.4;
    float y = ((waveH / 2) + 0.5) * (1 - lengthDiff*1.2);
    float pX = 0.8 * sin((2* PI) * waveTime) * 0.01;
    float pZ = 0.8 * sin((2* PI) * waveTime / 2) * 0.01;
    diff = vec2(pX, pZ) - center;
    lengthDiff = length(diff);
    waveH = sin(2 * (2 * PI) * lengthDiff - waveTime / 2) * 0.05;
    float factor = 1.0 - (cos(((2 * PI) * waveTime / 40)) + 1.0) / 2.0;    
    y += waveH * factor;
    res = vec4(v.x, y, v.z,1);
}

void splash(in vec3 P,out vec4 res, out vec3 N)
{
    vec2 posT = P.xz - center;
    float r = sqrt(posT.x * posT.x + posT.y * posT.y);
    P.y = sin(r * waveTime) / r + 2;
    res = vec4(P.x, P.y, P.z, 1);
}

void main(){

	// Output position of the vertex, in clip space : MVP * position
    vec3 P = v;
    vec4 res;
    vec3 N;
    directionalWave(P,res,N);
    //circularWave(P, res);
    //splash(P,res);
    
	gl_Position =  MVP * res;

}