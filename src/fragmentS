#version 330 core

uniform vec3 lightPos;
uniform vec3 lightColor;
uniform vec3 cameraPos;


// Ouput data
out vec3 color;

vec4 ambientM = vec4 (0.2, 0.2, 0.2, 0.2);
vec4 diffuse = vec4 (0.9, 0.9, 0.9, 0.9);
vec4 specular;

float ambientC = 0.2;
float diffuseC = 0.5;
float specularC = 0.7;

int shininessC = 1;

in vec3 normal;
in vec3 cameraVertex;
in mat4 mvMat;

void main()
{
    // N = Normal
    vec3 N = normalize(normal);
    // L = Light direction
    vec3 L = normalize(lightPos - cameraVertex);
    // V = view ray
    vec3 V = normalize(cameraPos - cameraVertex);
    // R = reflection vector
    vec3 R = normalize(-reflect(L,N));

    float diff = diffuseC * dot(N,L);
    float spec = specularC * pow(dot(V,R), shininessC);
    float r = (lightColor.x * 0) * (diff + ambientC) + spec;
    float g = (lightColor.y * 0.34) * (diff + ambientC) + spec;
    float b = (lightColor.z * 0.74) * (diff + ambientC) + spec;
	color = vec3(r,g,b);

}